# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: kifayashehadeh
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: auction-service
# "service" is the name of this project. This will also be added to your AWS resource names.
service: sls-project
plugins:
  - serverless-middleware

stages:
  default:
    params:
      tableName: "users-table-${sls:stage}"
      familyTableName: "fam-table-${sls:stage}"
      s3BucketName: "${self:custom.PhotosBucket.name}"

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: Allow
          Action: 's3:ListBucket'
          Resource: '*'

        - Effect: Allow
          Action:
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:PutBucketPolicy'
          Resource: 'arn:aws:s3:::{self:custom.PhotosBucket.name}/*'
        
  environment:
    USERS_TABLE: ${param:tableName}
    FAMILY_TABLE: ${param:familyTableName}
    S3_BUCKET_NAME: ${param:s3BucketName}

functions:
  api:
    handler: handler.handler
    events:
      - httpApi: "*"
  createUser: 
    handler: handlers/createUser.handler
    events:
      - http:
          method: post
          path: /createUser
  getUser: 
    handler: handlers/getUsers.handler
    events:
      - http:
          method: get
          path: /users
  twins: 
    handler: handlers/twins.handler
    events:
      - http:
          method: get
          path: /twins
  createFamily: 
    handler: handlers/createFamily.handler
    events:
      - http:
          method: post
          path: /createFamily
  populateFamily: 
    handler: handlers/populateFamily.handler
    events:
      - http:
          method: put
          path: /populateFamily
  getFamily: 
    handler: handlers/getFamily.handler
    events:
      - http:
          method: get
          path: /getFamily
  uploadFamilyPhoto:
    handler: handlers/uploadFamilyPhoto.handler
    events:
      - http:
          method: patch
          path: /uploadFamilyPhoto/{familyId}/picture


resources:
  Resources:
    UsersTable: ${file(resources/usersTable.yml):UsersTable}
    FamilyTable: ${file(resources/familyTable.yml):FamilyTable}
    PhotosBucket: ${file(resources/photosBucket.yml):PhotosBucket}
    


custom: 
  bundle:
    linting: false 
  PhotosBucket:
    name: photos-bucket-hjesheuhj827328-${self:provider.stage}